module LanguageServer
  module Protocol
    module Interface
      #
      # A `MarkupContent` literal represents a string value which content is
      # interpreted base on its kind flag. Currently the protocol supports
      # `plaintext` and `markdown` as markup kinds.
      #
      # If the kind is `markdown` then the value can contain fenced code blocks like
      # in GitHub issues.
      #
      # Here is an example how such a string can be constructed using
      # JavaScript / TypeScript:
      # ```typescript
      # let markdown: MarkdownContent = {
      # kind: MarkupKind.Markdown,
      # value: [
      # '# Header',
      # 'Some text',
      # '```typescript',
      # 'someCode();',
      # '```'
      # ].join('\n')
      # };
      # ```
      #
      # *Please Note* that clients might sanitize the return markdown. A client could
      # decide to remove HTML from the markdown to avoid script execution.
      #
      class MarkupContent
        def initialize: (kind: untyped, value: String) -> void

        @attributes: Hash[Symbol, untyped]
        attr_reader attributes: Hash[Symbol, untyped]

        def to_hash: () -> Hash[Symbol, untyped]

        def to_json: (*untyped) -> String
      end
    end
  end
end
